""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                              Plug
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call plug#begin('$VIM/vimfiles/my_plugin')

"美化
Plug 'morhetz/gruvbox'
Plug 'mhinz/vim-startify'
Plug 'itchyny/lightline.vim'

"文件树
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on':  'NERDTreeToggle' }

"Git
Plug 'tpope/vim-fugitive'

"匹配跳转
Plug 'vim-scripts/matchit.zip'

"异步语法检查
Plug 'w0rp/ale'

"对齐
Plug 'junegunn/vim-easy-align'

"对齐线
Plug 'Yggdroot/indentLine'

"撤销树
Plug 'mbbill/undotree'

"multiple selections
Plug 'terryma/vim-multiple-cursors'

"Highlights trailing whitespace
Plug 'bronson/vim-trailing-whitespace'

"括号补全
Plug 'jiangmiao/auto-pairs'

"代码补全
Plug 'maralla/completor.vim'
Plug 'maralla/completor-neosnippet'
Plug 'Shougo/neosnippet-snippets'

"Tag文件窗口
Plug 'vim-scripts/taglist.vim'

"注释
Plug 'scrooloose/nerdcommenter'

"语言类
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
Plug 'mattn/emmet-vim', {'for': 'html'}

call plug#end()

filetype indent plugin on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           common setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""
"General
""""""""""""""""""""""""""""""""""""""""""""
set nocompatible
set nobackup
set noswapfile
set history=1024
"自动设置当前目录为正在编辑的目录
set autochdir
autocmd BufEnter * silent! lcd %:p:h:gs/ /\\ /

set whichwrap=b,s,<,>,[,]
set nobomb
set backspace=indent,eol,start whichwrap+=<,>,[,]
" Vim 的默认寄存器和系统剪贴板共享
set clipboard+=unnamed
" 设置 alt 键不映射到菜单栏
set winaltkeys=no

"关闭提示音
set noeb
set vb t_vb=

""""""""""""""""""""""""""""""""""""""""""""
"Encoding
""""""""""""""""""""""""""""""""""""""""""""
set tenc=utf-8
set encoding=utf-8
set fileencodings=utf-8,chinese,latin-1
"解决consle输出乱码
language messages zh_CN.utf-8

""""""""""""""""""""""""""""""""""""""""""""
"GUI
""""""""""""""""""""""""""""""""""""""""""""
" 设定命令行的行数为 1
set cmdheight=2
" 显示状态栏 (默认值为 1, 无法显示状态栏)
set laststatus=2
" 设置 gvim 显示字体
set guifont=Inziu_Iosevka_SC:h12

" 使用指令变大变小
command! FontBigger  :let &guifont = substitute(&guifont, '\d\+$', '\=submatch(0)+1', '')
command! FontSmaller :let &guifont = substitute(&guifont, '\d\+$', '\=submatch(0)-1', '')

set cursorline
set cursorcolumn

set t_Co=256
if has("gui_running")
  " Switch on highlighting the last used search pattern.
  set hlsearch
endif

" 开启实时搜索功能
set incsearch
" 搜索时大小写不敏感
set ignorecase

set number
set relativenumber
" 窗口大小
set lines=30 columns=100

" 分割出来的窗口位于当前窗口下边/右边
set splitbelow
set splitright

"不显示工具/菜单栏
set guioptions-=T
set guioptions-=m
set guioptions-=L
set guioptions-=r
set guioptions-=b

""""""""""""""""""""""""""""""""""""""""""""
"Format
""""""""""""""""""""""""""""""""""""""""""""
set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
syntax on

"set foldmethod=marker
"关闭自动折叠
set nofoldenable

""""""""""""""""""""""""""""""""""""""""""""
"Key
""""""""""""""""""""""""""""""""""""""""""""
"set my leader
let mapleader=","

" 定义快捷键关闭当前分割窗口
nmap <Leader>q :q<CR>
" 定义快捷键保存当前窗口内容
nmap <Leader>w :w<CR>

" 定义退出模式快捷键
inoremap jk <ESC>

" 定义vim设置文件内容相关
nnoremap <leader>ev :edit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" 打开当前目录 explorer/cmd
nmap <silent> <leader>exp :!start explorer %:p:h<CR>
nmap <silent> <leader>cmd :!start cmd /k cd %:p:h<cr>

" 复制当前文件/路径到剪贴板
nmap <leader>cf :let @*=substitute(expand("%"), "/", "\\", "g")<CR>
nmap <leader>cp :let @*=substitute(expand("%:p"), "/", "\\", "g")<CR>

" 快速交换当前行位置
nnoremap [m  :<c-u>execute 'move -1-'. v:count1<cr>
nnoremap ]m  :<c-u>execute 'move +'. v:count1<cr>

" 一键运行
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
    exec "w"
    if &filetype == 'c'
        exec "!g++ % -o %<"
        exec "! %<"
    elseif &filetype == 'cpp'
        exec "!g++ % -o %<"
        exec "! %<"
    elseif &filetype == 'java'
        exec "!javac %"
        exec "!java %<"
    elseif &filetype == 'python'
        exec "!pythonvim %"
    elseif &filetype == 'sh'
        :!%
    endif
endfunc


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           Plug setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"美化
""""""""""""""""""""""""""""""""""""""""""""
set background=dark
colorscheme gruvbox

set noshowmode
let g:lightline = {
      \ 'colorscheme': 'material',
      \ 'active': {
      \   'left': [ ['mode', 'paste'],
      \             ['fugitive', 'readonly', 'filename', 'modified'] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"🔒":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \   'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
      \ }
      \ }

"文件树
""""""""""""""""""""""""""""""""""""""""""""
map <leader>n :NERDTreeToggle<CR>       " 关闭NERDTree快捷键
""当NERDTree为剩下的唯一窗口时自动关闭
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
""修改树的显示图标
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeAutoCenter=1

" 是否显示隐藏文件
let NERDTreeShowHidden=0
" 设置宽度
let NERDTreeWinSize=25
" 在终端启动vim时，共享NERDTree
let g:nerdtree_tabs_open_on_console_startup=1
" 忽略文件的显示
let NERDTreeIgnore=['\.pyc','\~$','\.swp','\.class','\.ini']
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : "☒",
    \ "Unknown"   : "?"
    \ }

"异步语法检查
""""""""""""""""""""""""""""""""""""""""""""
let g:ale_set_highlights = 0
"自定义error和warning图标
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'
"显示Linter名称,出错或警告等相关信息
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
"打开文件时不进行检查
let g:ale_lint_on_enter = 0

"普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
nmap <leader>sj <Plug>(ale_previous_wrap)
nmap <leader>sn <Plug>(ale_next_wrap)
"<Leader>s触发/关闭语法检查
nmap <Leader>st :ALEToggle<CR>
"<Leader>d查看错误或警告的详细信息
nmap <Leader>sd :ALEDetail<CR>
"使用clang对c和c++进行语法检查，对python使用flake8进行语法检查
let g:ale_linters = {
\   'c++': ['g++'],
\   'c': ['gcc'],
\   'python': ['flake8'],
\}

"对齐
""""""""""""""""""""""""""""""""""""""""""""
" 快速对齐
" ,a=        对齐等号表达
" ,a:        对齐冒号表达式(json/map等)
" # 默认左对齐
" ,a<space>  首个空格对齐
" ,a2<space> 第二个空格对齐
" ,a-<space> 倒数第一个空格对齐
" ,a-2<space> 倒数第二个空格对齐
" ,a*<space> 所有空格依次对齐
" # 右对齐
" ,a<Enter>*<space>

vnoremap <silent> <Enter> :EasyAlign<cr>
if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = {
\ 'pattern': '#', 'ignore_groups': ['String']
\ }

"对齐线
"""""""""""""""""""""""""""""""""""""""""""""
" Vim
let g:indentLine_color_term = 239
" GVim
let g:indentLine_color_gui = '#A4E57E'

"撤销树
""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>ut :UndotreeToggle<cr>
if has("persistent_undo")
    set undodir=$VIM/undodir/
    set undofile
endif

"multiple selections
""""""""""""""""""""""""""""""""""""""""""""
" 关闭默认匹配
let g:multi_cursor_use_default_mapping=0
" 自定义匹配
let g:multi_cursor_next_key='<leader>mn'
let g:multi_cursor_prev_key='<leader>mp'
let g:multi_cursor_skip_key='<leader>ms'
let g:multi_cursor_quit_key='<Esc>'

"Highlights trailing whitespace
""""""""""""""""""""""""""""""""""""""""""""
nmap <leader>tw :FixWhitespace<cr>

"代码补全
""""""""""""""""""""""""""""""""""""""""""""
"使用tab补全
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"

"taglist
"""""""""""""""""""""""""""""""""""""""""""
nmap <leader>tl :TlistToggle<cr>

"注释
""""""""""""""""""""""""""""""""""""""""""""
"<leader>cc   加注释
"<leader>cu   解开注释
"<leader>c<space>  加上/解开注释, 智能判断
"<leader>cy   先复制, 再注解(p可以进行黏贴)

" 注释的时候自动加个空格, 强迫症必配
let g:NERDSpaceDelims=1

"html
""""""""""""""""""""""""""""""""""""""""""""
let g:user_emmet_expandabbr_key = '<leader>e'
let g:use_emmet_complete_tag = 1
let g:user_emmet_settings = {"lang":"zh-cn"}


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           auto setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup vimrcEx
    au!
    autocmd FileType text setlocal textwidth=78
augroup END

" vim 文件折叠方式为 marker
augroup ft_vim
    au!
    autocmd FileType vim setlocal foldmethod=marker

    " 打开文件总是定位到上次编辑的位置
    autocmd BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif
augroup END
